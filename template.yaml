AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Breakdown
Parameters:
  GitHubBranch:
    Type: String
    Default: master

  GitHubRepo:
    Type: String
    Default: breakdown

  GitHubToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: GitHubToken

  GitHubUser:
    Type: String
    Default: cazzer

  DatabaseName:
    Type: String
    Default: breakdown

  DatabaseUser:
    Type: String
    Default: postgres

  DatabasePassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: DatabasePassword

Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: swagger.yaml
      StageName: prod
      Variables:
        ApiHandler: !Ref PostgraphileFunction
        ApiRole: !Ref ApiRole

  PostgraphileFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - "logs:*"
              - "events:*"
              - "rds:*"
              - "ec2:*"
      Roles:
        - !Ref PostgraphileFunctionRole

  PostgraphileFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  PostgraphileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lib/postgraphile.default
      Role: !GetAtt PostgraphileFunctionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          DEBUG: postgraphile*
          DB_HOST: Fn::GetAtt:
            - Database
            - Endpoint.Address
          DB_NAME: !Ref DatabaseName
          DB_PASSWORD: !Ref DatabasePassword
          DB_SCHEMA: !Ref DatabaseName
          DB_USER: !Ref DatabaseUser
      Events:
        Api:
          Type: Api
          Properties:
            Path: /graphql
            Method: post

  ApiPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource:
              - !GetAtt PostgraphileFunction.Arn
            Effect: "Allow"
            Action:
              - "lambda:InvokeFunction"
      Roles:
        - !Ref ApiRole

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  PipelineBucket:
    Type: AWS::S3::Bucket

  LambdaSourceBucket:
    Type: AWS::S3::Bucket

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole

  CodebuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole

  AutomationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - s3:*
              - cloudformation:*
              - iam:PassRole
              - codebuild:*
              - cloudwatch:*
              - logs:*
              - ec2:*
              - iam:*
              - lambda:*
              - sns:*
              - ssm:*
              - rds:*
              - ecr:*
              - xray:*
              - cloudfront:*
              - route53:*
              - apigateway:*
              - cognito-idp:*
      Roles:
        - !Ref PipelineRole
        - !Ref CodebuildRole
        - !Ref CloudFormationRole

  CodebuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: buildspec.yaml
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/nodejs:10.1.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: OUTPUT_TEMPLATE_FILE
            Value: 'packaged-template.yaml'
          - Name: TEMPLATE_FILE
            Value: 'template.yaml'
          - Name: S3_BUCKET
            Value: !Ref LambdaSourceBucket
      ServiceRole: !Ref CodebuildRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodebuildProject
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Build
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: ChangeSet
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref AWS::StackName
                TemplatePath: Build::packaged-template.yaml
              InputArtifacts:
                - Name: Build
              RunOrder: 1
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ChangeSet
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref AWS::StackName
              RunOrder: 2

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AliasAttributes:
        - phone_number
        - email
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn
      UsernameAttributes:
        - email
      UserPoolName: BreakdownUserPoolV1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: BreakdownWebApplication
      GenerateSecret: true
      RefreshTokenValidity: 90
      UserPoolId: !Ref UserPool

  PostConfirmationFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-post-confirmation-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - "logs:*"
              - "events:*"
              - "rds:*"
      Roles:
        - !Ref PostConfirmationFunctionRole

  PostConfirmationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lib/cognito/post-confirmation.default
      Role: !GetAtt PostConfirmationFunctionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: Fn::GetAtt:
            - Database
            - Endpoint.Address
          DB_NAME: !Ref DatabaseName
          DB_PASSWORD: !Ref DatabasePassword
          DB_SCHEMA: !Ref DatabaseName
          DB_USER: !Ref DatabaseUser
          DEBUG: post-confirmation*

  PreTokenGenerationFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-pre-token-generation-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - "logs:*"
              - "events:*"
              - "rds:*"
      Roles:
        - !Ref PreTokenGenerationFunctionRole

  PreTokenGenerationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  PreTokenGenerationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lib/cognito/pre-token-generation.default
      Role: !GetAtt PreTokenGenerationFunctionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          DB_HOST: Fn::GetAtt:
            - Database
            - Endpoint.Address
          DB_NAME: !Ref DatabaseName
          DB_PASSWORD: !Ref DatabasePassword
          DB_SCHEMA: !Ref DatabaseName
          DB_USER: !Ref DatabaseUser
          DEBUG: pre-token*

  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      BackupRetentionPeriod: 7
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: breakdown-rds
      DBName: !Ref DatabaseName
      Engine: postgres
      EngineVersion: 10.4
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword
      MonitoringInterval: 60
      StorageType: gp2
      PubliclyAccessible: true
      PreferredMaintenanceWindow: "Sun:08:30-Sun:09:30"
