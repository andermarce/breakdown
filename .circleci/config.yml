version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.15

aliases:
  - &docker-image
    docker:
      - image: circleci/node:10

  - &install_aws_cli aws-cli/install

  - &install_typescript_globally
    run:
      name: Install Typescript globally
      command: yarn global add typescript

  - &configure_aws_cli
    aws-cli/configure:
      aws-region: 'AWS_REGION'
      aws-access-key-id: 'AWS_ACCESS_KEY_ID'
      aws-secret-access-key: 'AWS_SECRET_ACCESS_KEY'

  - &deploy
    run:
      name: Deploy
      command: yarn deploy

  - &deploy_production_filters
    filters:
      branches:
        only: master

  - &restore-build-flag
      restore_cache:
        keys:
          - dependencies-cache-{{ checksum "package.json" }}

  - &test-build-flag
      run:
        name: Exit if build flag exists
        command: |
          FILE=build.flag
          if test -f "$FILE"; then
              echo "$FILE exist"
              circleci step halt
          fi

  - &generate-lock-file
      run:
        name: Generate lock file
        command: yarn generate-lock-entry >> yarn.lock

  - &restore-cache
      restore_cache:
        keys:
          - dependencies-cache-{{ checksum "yarn.lock" }}

  - &save-cache
      save_cache:
        paths:
          - node_modules
        key: dependencies-cache-{{ checksum "yarn.lock" }}

commands:
  save-build-flag:
    steps:
      - run:
          name: Create build flag
          command: touch build.flag
      - save_cache:
          paths:
            - build.flag
          key:
            dependencies-cache-{{ checksum "package.json" }}

  node-build-steps:
    steps:
      - checkout
      - *restore-build-flag
      - *test-build-flag
      - *generate-lock-file
      - *restore-cache
      - *install_aws_cli
      - *configure_aws_cli
      - run:
          name: Build
          command: |
            yarn
            yarn build
            rm -rf src
            yarn --production
            yarn package
      - *save-cache
      - run:
          name: Deploy
          command: yarn deploy
      - save-build-flag

jobs:
  build-websocket-gateway:
    docker:
      - image: circleci/node:10
    working_directory: ~/breakdown/services/websocket-gateway

    steps:
      - node-build-steps
      - run:
          name: Create new deployment
          command: |
            aws apigatewayv2 create-deployment --api-id eqtdu2n3u0 --stage-name prod --description "Circle initiated deployment"

  build-postgraphile:
    docker:
      - image: circleci/node:10
    working_directory: ~/breakdown/services/postgraphile

    steps:
      - node-build-steps

  build-web:
    docker:
      - image: circleci/node:10
    working_directory: ~/breakdown/web

    steps:
      - checkout
      - *restore-build-flag
      - *test-build-flag
      - *generate-lock-file
      - *restore-cache
      - *install_aws_cli
      - *configure_aws_cli
      - run:
          command: |
            yarn
            yarn build
            rm -rf src
      - *save-cache
      - run:
          name: Deploy
          command: |
            aws cloudfront create-invalidation --distribution-id $CDN_DISTRIBUTION_ID --paths "/*"
            aws s3 cp dist/ s3://$WEB_S3_BUCKET --recursive --acl public-read
      - save-build-flag

workflows:
  version: 2
  websocket-gateway:
    jobs:
      - build-websocket-gateway:
          <<: *deploy_production_filters
          context: aws-production

  web:
    jobs:
      - build-web:
          <<: *deploy_production_filters
          context: aws-production

  postgraphile:
    jobs:
      - build-postgraphile:
          <<: *deploy_production_filters
          context: aws-production
